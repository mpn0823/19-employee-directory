{"version":3,"sources":["components/Form.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","event","preventDefault","onChange","handleInput","type","id","placeholder","value","Card","picture","employee","name","location","className","src","large","alt","width","last","first","city","state","country","App","useState","filter","order","setState","strCompare","a","b","localeCompare","document","getElementById","employees","slice","length","sort","map","key","uuid","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d1ab4c9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form\r\n            onSubmit={(event) => event.preventDefault()}\r\n            onChange={props.handleInput}>\r\n            <input type=\"text\" id=\"filter\" placeholder=\"filter by country\" />\r\n            <select id=\"order\">\r\n                <option value=\"ascending\">ascending</option>\r\n                <option value=\"descending\">descending</option>\r\n            </select>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Card = ({\r\n    employee: { picture },\r\n    employee: { name },\r\n    employee: { location },\r\n}) => (\r\n    <div className=\"card\">\r\n        <img src={picture.large} alt=\"\" width=\"100%\"></img>\r\n        <p>\r\n            {name.last}, {name.first}\r\n        </p>\r\n        <p>\r\n            {location.city}, {location.state}, {location.country}\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n","import React, { useState, Fragment } from \"react\";\nimport employees from \"./employees.json\";\nimport { v4 as uuid } from \"uuid\";\n\n// Components\nimport Form from \"./components/Form\";\nimport Card from \"./components/Card\";\n\nconst App = () => {\n    const [state, setState] = useState({\n        filter: \"\",\n        order: \"ascending\",\n    });\n\n    // Update app state whenever user provides input\n    const handleInput = () => {\n        setState({\n            filter: document.getElementById(\"filter\").value,\n            order: document.getElementById(\"order\").value,\n        });\n    };\n\n    // Compare function to sort employee objects alpabetically by country\n    const strCompare = (a, b) =>\n        a.location.country.localeCompare(b.location.country);\n\n    return (\n        <Fragment>\n            <Form handleInput={handleInput} />\n            <div className=\"container\">\n                <div className=\"row\">\n                    {employees\n                        .filter(\n                            (employee) =>\n                                employee.location.country.slice(\n                                    0,\n                                    state.filter.length\n                                ) === state.filter\n                        )\n                        .sort((a, b) =>\n                            state.order === \"ascending\"\n                                ? strCompare(a, b)\n                                : strCompare(b, a)\n                        )\n                        .map((employee) => (\n                            <Card employee={employee} key={uuid()} />\n                        ))}\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}